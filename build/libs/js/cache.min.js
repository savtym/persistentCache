'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var globalSize = 5242880; // 5MB

var idMemory = 1;
var currentSizeMemory = 0;

var defaultSizeRAM = 16384;
var defaultsizeLocal = 16384;

var Cache = function () {
  _createClass(Cache, null, [{
    key: 'freeSize',
    value: function freeSize() {
      return globalSize - currentSizeMemory;
    }
  }]);

  function Cache() {
    var sizeRAM = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 16384;
    var sizeLocal = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16384;

    _classCallCheck(this, Cache);

    sizeRAM = parseInt(sizeRAM);
    sizeLocal = parseInt(sizeLocal);

    sizeRAM = isNaN(sizeRAM) || sizeRAM < 0 ? defaultSizeRAM : sizeRAM;
    sizeLocal = isNaN(sizeLocal) || sizeLocal < 0 ? defaultsizeLocal : sizeLocal;

    if (Cache.freeSize < sizeLocal) {
      throw 'Memory is full';
    }

    this.persistent = new Persistent(sizeRAM, sizeLocal, idMemory++);
    currentSizeMemory += this.persistent.freeMemoryLocalStorage;

    return this.persistent;
  }

  _createClass(Cache, null, [{
    key: 'removeCache',
    value: function removeCache(cache) {
      currentSizeMemory -= cache.maxSizeLocalStorage;
      localStorage.removeItem(cache.id);
      cache = null;
    }
  }, {
    key: 'clear',
    value: function clear() {
      currentSizeMemory = 0;
      localStorage.clear();
    }
  }]);

  return Cache;
}();

exports.default = Cache;
'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//
// eventEmiter.js
//

/*
 option for cookie:
 name - name cookie
 value - value cookie
 options:
 expires - time life for coolie in seconds
 path - path for cookie
 domain - domain for cookie
 secure - true/false if need send cookie with secure canal
 */

var id = void 0;
var data = {};

var lifeTimeRAM = {};
var lifeTimeLocalStorage = {};

var busySizeRAM = 0;
var busySizeLocalStorage = 0;

var maxSizeRAM = 0;
var maxSizeLocalStorage = 0;

var Persistent = function () {
  function Persistent(curMaxSizeRAM, curMaxSizeLocalStorage, curId) {
    _classCallCheck(this, Persistent);

    id = curId;
    maxSizeRAM = curMaxSizeRAM;
    maxSizeLocalStorage = curMaxSizeLocalStorage;
  }

  _createClass(Persistent, [{
    key: '_insertLocalStorage',
    value: function _insertLocalStorage(key, data, sizeData) {
      var freeSize = this.freeMemoryLocalStorage;

      if (sizeData < freeSize) {

        this._setValuesLocalStorage(key, data, JSON.parse(localStorage.getItem(id)) || {}, sizeData, lifeTimeLocalStorage);
      } else if (sizeData < maxSizeLocalStorage) {

        var overwriting = Persistent._leastRecentlyUsed(lifeTimeLocalStorage, sizeData - freeSize);
        var values = this.localStorage();

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = overwriting[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _step$value = _slicedToArray(_step.value, 2),
                _key = _step$value[0],
                obj = _step$value[1];

            busySizeLocalStorage -= obj.size;
            delete values[_key];
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        this._setValuesLocalStorage(key, data, values, sizeData);
      } else {
        console.log('Max size localStorage is less than this data');
      }
    }
  }, {
    key: '_setValuesLocalStorage',
    value: function _setValuesLocalStorage(key, data, values, sizeData, lifeTime) {
      values[key] = data;
      busySizeLocalStorage += sizeData;
      this._setKeyLifeTime(key, sizeData, lifeTime);
      localStorage.setItem(id, JSON.stringify(values));
    }
  }, {
    key: '_setKeyLifeTime',
    value: function _setKeyLifeTime(key, sizeData, lifeTime) {
      lifeTime[key] = {
        size: sizeData,
        time: new Date().getTime()
      };
    }
  }, {
    key: 'id',
    get: function get() {
      return id;
    }
  }, {
    key: 'maxSizeRAM',
    get: function get() {
      return maxSizeRAM;
    }
  }, {
    key: 'maxSizeLocalStorage',
    get: function get() {
      return maxSizeLocalStorage;
    }
  }, {
    key: 'RAM',
    get: function get() {
      return data;
    }
  }, {
    key: 'localStorage',
    get: function get() {
      return JSON.parse(localStorage.getItem(id));
    }
  }, {
    key: 'freeMemoryRAM',
    get: function get() {
      return maxSizeRAM - busySizeRAM;
    }
  }, {
    key: 'freeMemoryLocalStorage',
    get: function get() {
      return maxSizeLocalStorage - busySizeLocalStorage;
    }
  }], [{
    key: '_leastRecentlyUsed',
    value: function _leastRecentlyUsed(lifeTime, needSize) {

      var result = [];
      var sortable = [];
      var curSizeFree = 0;

      for (var key in lifeTime) {
        sortable.push([key, lifeTime[key]]);
      }

      sortable.sort(function (a, b) {
        return a[1].time - b[1].time;
      });

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = sortable[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var _step2$value = _slicedToArray(_step2.value, 2),
              _key2 = _step2$value[0],
              obj = _step2$value[1];

          result.push([_key2, obj]);
          curSizeFree += obj.size;
          if (curSizeFree >= needSize) {
            break;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return result;
    }
  }, {
    key: '_roughSizeOfObject',
    value: function _roughSizeOfObject(str) {
      return JSON.stringify(str).length * 2;
    }
  }]);

  return Persistent;
}();
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RAM = function RAM() {
	_classCallCheck(this, RAM);
};
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Storage = function Storage() {
	_classCallCheck(this, Storage);
};